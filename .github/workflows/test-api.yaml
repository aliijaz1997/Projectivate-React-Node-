# This is a basic workflow to help you get started with Actions

name: api-ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    paths:
      - "apps/backend/**"
  pull_request:
    branches: [main]
    paths:
      - "apps/backend/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgresql://test:test@localhost:5432/pm"

    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: npx nps prepare.ci.back
      - run: npx nps build.back
      - run: npx nps test.ci.back

  deploy:
    name: "Deploy to production"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker Image
        run: docker build -t projectivate/server . -f apps/backend/Dockerfile
      - name: Install PV
        run: sudo apt install pv
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/projectivate-prod.key
          chmod 600 ~/.ssh/projectivate-prod.key
          cat >>~/.ssh/config <<END
          Host projectivate-prod
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/projectivate-prod.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.PRODUCTION_SSH_USER }}
          SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST }}

      - name: Push docker image
        run: docker save projectivate/server | bzip2 | pv | ssh projectivate-prod docker load
