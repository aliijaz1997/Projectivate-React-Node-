// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson", "fullTextSearch"]
}

model Tenant {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  users            TenantsToUsers[]
  projects         Project[]
  tasks            Task[]
  subscriptionType String
}

model Project {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String
  user                  User     @relation(fields: [userId], references: [id])
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  tasks                 Task[]
  Tenant                Tenant   @relation(fields: [tenantId], references: [id])
  tenantId              String   @db.Uuid
  customFields          Json
  additionalInformation Json?
  Sprint                Sprint[]
  preferences           Json     @default("{}")
  views                 View[]
  currentView           String?
}

model View {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  filters   Json     @default("{}")
  groupings Json     @default("{}")
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @db.Uuid
}

model Task {
  id              String            @id @default(uuid()) @db.Uuid
  title           String
  owner           User              @relation("Owner", fields: [ownerId], references: [id])
  ownerId         String
  assignee        AssigneesOnTask[]
  dateStart       DateTime
  dateEnd         DateTime
  description     String
  attachments     Attachment[]
  comments        Comment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  Project         Project           @relation(fields: [projectId], references: [id])
  projectId       String            @db.Uuid
  Tenant          Tenant            @relation(fields: [tenantId], references: [id])
  tenantId        String            @db.Uuid
  Parent          Task?             @relation("ParentToChild", fields: [parentId], references: [id])
  parentId        String?           @db.Uuid
  position        Int
  Task            Task[]            @relation("ParentToChild")
  customFields    Json
  Sprint          Sprint?           @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId        String?           @db.Uuid
  previousSprints Json              @default("{}")
  TimeTrack       TimeTrack[]
  TaskLog         TaskLog[]
}

model User {
  id           String            @id
  email        String            @unique
  Project      Project[]
  OwnedTask    Task[]            @relation("Owner")
  AssignedTask AssigneesOnTask[]
  Comment      Comment[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
  tenants      TenantsToUsers[]
  TaskLog      TaskLog[]
  TimeTrack    TimeTrack[]
}

model AssigneesOnTask {
  task       Task   @relation(fields: [taskId], references: [id])
  taskId     String @db.Uuid
  assignee   User   @relation(fields: [assigneeId], references: [id])
  assigneeId String

  @@id([taskId, assigneeId])
}

model Attachment {
  id     String @id @default(uuid()) @db.Uuid
  url    String
  name   String
  Task   Task   @relation(fields: [taskId], references: [id])
  taskId String @db.Uuid
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String   @db.Uuid
  createdAt DateTime @default(now())
}

model TenantsToUsers {
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @db.Uuid
  User     User   @relation(fields: [userId], references: [id])
  userId   String

  @@id([tenantId, userId])
}

model Customer {
  id          String @id
  email       String @unique
  description String
}

model Invite {
  id             String  @id @default(uuid()) @db.Uuid
  email          String  @unique
  tenantId       String  @db.Uuid
  inviteAccepted Boolean
  inviteSenderId String

  @@unique([email, tenantId], name: "Invite_email_tenantId_unique_constraint")
}

model Sprint {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  sprintSpan   String
  startDate    DateTime
  endDate      DateTime
  majorTargets String
  minorTargets String
  customField  String?
  tasks        Task[]
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String   @db.Uuid
}

model TaskLog {
  id                   String                 @id @default(uuid()) @db.Uuid
  Task                 Task                   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId               String                 @db.Uuid
  User                 User                   @relation(fields: [userId], references: [id])
  userId               String
  dateStart            DateTime
  dateEnd              DateTime
  time                 Float                  @default(0)
  TaskLogToTaskLogItem TaskLogToTaskLogItem[]
}

model TaskLogItem {
  id                   String                 @id @default(uuid()) @db.Uuid
  field                String
  fieldItem            String
  TaskLogToTaskLogItem TaskLogToTaskLogItem[]
}

model TaskLogToTaskLogItem {
  taskLog       TaskLog     @relation(fields: [taskLogId], references: [id], onDelete: Cascade)
  taskLogId     String      @db.Uuid
  taskLogItem   TaskLogItem @relation(fields: [taskLogItemId], references: [id], onDelete: Cascade)
  taskLogItemId String      @db.Uuid


  @@id([taskLogId, taskLogItemId])
}

model TimeTrack {
  id        String    @id @default(uuid()) @db.Uuid
  startDate DateTime?
  endDate   DateTime?
  User      User      @relation(fields: [userId], references: [id])
  userId    String
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String    @db.Uuid
}
